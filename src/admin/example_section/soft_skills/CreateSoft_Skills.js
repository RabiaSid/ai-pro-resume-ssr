import React, { useState, useRef, useEffect } from "react";
import { ApiService } from "../../../services/ApiService";
import AllborderInputGroup from "../../../components/AllborderInputGroup";
import swal from "sweetalert";
import LoadingSpiner from "../../../components/LoadingSpinner";
import ToggleSwitch from "../../../components/ToggleSwitch";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../../services/Auth";
import axios from "axios";
import { Controller, useForm } from "react-hook-form";

const CreateSoft_Skills = () => {
  const { user } = useAuth();
  const [errors, setErrors] = useState(null);
  const navigate = useNavigate();
  //   Value States
  const [isExample, setIsExample] = useState(0);
  const [job_positions, set_job_positions] = useState([]);

  const [selected_job_position, set_selected_job_position] = useState("");

  const [isLoading, setIsloading] = useState(false);

  const [soft_skills, set_soft_skills] = useState([]);

  const { control, handleSubmit, setValue } = useForm({ mode: "onChange" });

  const handleCreateSoftSkills = (data) => {
    const arr = [];
    // console.log("array", arr);
    const selectedData = data.data.filter((item) => item.isSelected);
    selectedData.map((d) => arr.push(d.name));
    setIsloading(true);
    ApiService.createSoftSkills(
      user?.token,
      arr,
      isExample,
      selected_job_position
    )
      .then((res) => {
        setIsloading(false);
        console.log(res);
        swal({
          title: res.data.message,
          icon: "success",
        })
          .then(() => navigate(-1))
          .catch(() => navigate(-1));
      })
      .catch((err) => {
        setIsloading(false);
        setErrors(Object.values(err.response.data.errors));
      });
  };

  const [isAllSelected, setIsAllSelected] = useState(false);

  const [checkboxStates, setCheckboxStates] = useState(
    soft_skills.map(() => false) // Tracks individual checkbox states
  );

  const handleSelectAll = () => {
    const newState = !isAllSelected;
    setIsAllSelected(newState);
    const updatedStates = soft_skills.map(() => newState);

    setCheckboxStates(updatedStates); // Update local state to sync the UI
    soft_skills.forEach((_, idx) => {
      setValue(`data.${idx}.isSelected`, newState); // Update form state
    });
  };

  const handleCheckboxChange = (idx, checked) => {
    const updatedStates = [...checkboxStates];
    updatedStates[idx] = checked;
    setCheckboxStates(updatedStates);

    // Update the "Select All" checkbox state if needed
    setIsAllSelected(updatedStates.every((state) => state));
  };

  useEffect(() => {
    ApiService.getAllJobPositions(user?.token)
      .then((res) => {
        // console.log(res.data.data);
        set_job_positions(res.data.data);
      })
      .catch((err) => {
        console.log(err);
      });
  }, [user]);

  const handleGenerateClick = async () => {
    setIsloading(true);
    if (!job_positions) {
      return;
    }
    try {
      const response = await axios.post(
        "https://ai.skillsgen.aiproresume.com/api/v1/soft-skill-generation",
        JSON.stringify({ job_title: selected_job_position }),
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      // console.log("API Response:", response.data.data.soft_Skills);
      set_soft_skills(response.data.data.soft_Skills);

      setIsloading(false);
    } catch (error) {
      console.error("Error calling the API:", error);
      setIsloading(false);
    }
  };

  return (
    <>
      {isLoading && <LoadingSpiner isLoading={isLoading} />}
      <div className="p-2">
        <h1 className="text-2xl font-bold mb-5">Create Soft Skills</h1>

        <select
          onChange={(e) => set_selected_job_position(e.target.value)}
          className="w-80 border-2 px-3 mb-5"
        >
          {job_positions.map((pos, idx) => {
            return (
              <option key={idx} value={pos.id}>
                {pos.name}
              </option>
            );
          })}
        </select>
        <button
          onClick={handleGenerateClick}
          className="bg-primary-green px-3 py-1 text-white rounded-lg ml-5"
        >
          Generate with AI
        </button>

        {soft_skills.length > 0 ? (
          <>
            <form onSubmit={handleSubmit(handleCreateSoftSkills)}>
              <p className="mt-2 text-2xl font-bold">
                Soft Skills Suggestions Generated By AI :
              </p>
              {/* "Select All" Checkbox */}
              <div className="mt-2 p-2">
                <div className="flex items-start justify-end gap-3">
                  <p className="text-md">Select All</p>
                  <input
                    type="checkbox"
                    className="w-5 h-5"
                    checked={isAllSelected}
                    onChange={handleSelectAll}
                  />
                </div>
              </div>
              <div className="mt-3 flex flex-wrap gap-2">
                {soft_skills.map((ss, idx) => (
                  <>
                    <Controller
                      name={`data.${idx}.name`}
                      control={control}
                      defaultValue={ss}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="hidden"
                          className="border-2 py-1 px-3"
                        />
                      )}
                    />
                    <div
                      key={idx}
                      className="flex items-center justify-center gap-3 bg-primary-blue text-white px-5 py-1 rounded-lg"
                    >
                      <span>{ss}</span>
                      <Controller
                        name={`data.${idx}.isSelected`}
                        control={control}
                        defaultValue={false}
                        render={({ field }) => (
                          <input
                            {...field}
                            type="checkbox"
                            className="w-5 h-5"
                            checked={checkboxStates[idx]} // Bind to local state
                            onChange={(e) => {
                              field.onChange(e.target.checked); // Update form state
                              handleCheckboxChange(idx, e.target.checked); // Sync UI
                            }}
                          />
                        )}
                      />
                    </div>
                  </>
                ))}
              </div>
              <div className="flex flex-col gap-2 mb-4 mt-2">
                <span>Example</span>
                <ToggleSwitch
                  ChangeStatus={(val) => {
                    if (val) {
                      setIsExample(1);
                    } else {
                      setIsExample(0);
                    }
                  }}
                  status={isExample}
                />
              </div>

              <div className="py-2">
                <button
                  type="submit"
                  className="bg-primary-green text-lg text-white font-bold rounded-md px-4 py-2"
                >
                  Create
                </button>
              </div>
            </form>
          </>
        ) : (
          ""
        )}

        {/* <form>
          <div className="border h-full p-4">
            <div>
              <AllborderInputGroup
                htmlFor={"name"}
                isRequired={true}
                label={"Name"}
                onchange={(val) => setname(val)}
                value={name}
                placeholder={"name"}
              />
            </div>

            <ul className="list-disc ml-2 py-2">
              {errors?.map((err) => (
                <li className="text-red-500 text-sm">{err}</li>
              ))}
            </ul>

         
          </div>
        </form> */}
      </div>
    </>
  );
};

export default CreateSoft_Skills;
